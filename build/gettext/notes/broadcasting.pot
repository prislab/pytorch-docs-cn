# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Torch Contributors
# This file is distributed under the same license as the PyTorch package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyTorch master (0.3.0.post4 )\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-01-12 14:38+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/notes/broadcasting.rst:4
msgid "Broadcasting semantics"
msgstr ""

#: ../../source/notes/broadcasting.rst:6
msgid "Many PyTorch operations support :any:`NumPy Broadcasting Semantics <numpy.doc.broadcasting>`."
msgstr ""

#: ../../source/notes/broadcasting.rst:8
msgid "In short, if a PyTorch operation supports broadcast, then its Tensor arguments can be automatically expanded to be of equal sizes (without making copies of the data)."
msgstr ""

#: ../../source/notes/broadcasting.rst:12
msgid "General semantics"
msgstr ""

#: ../../source/notes/broadcasting.rst:13
msgid "Two tensors are \"broadcastable\" if the following rules hold:"
msgstr ""

#: ../../source/notes/broadcasting.rst:15
msgid "Each tensor has at least one dimension."
msgstr ""

#: ../../source/notes/broadcasting.rst:16
msgid "When iterating over the dimension sizes, starting at the trailing dimension, the dimension sizes must either be equal, one of them is 1, or one of them does not exist."
msgstr ""

#: ../../source/notes/broadcasting.rst:20
#: ../../source/notes/broadcasting.rst:52
#: ../../source/notes/broadcasting.rst:76
#: ../../source/notes/broadcasting.rst:108
msgid "For Example::"
msgstr ""

#: ../../source/notes/broadcasting.rst:44
msgid "If two tensors :attr:`x`, :attr:`y` are \"broadcastable\", the resulting tensor size is calculated as follows:"
msgstr ""

#: ../../source/notes/broadcasting.rst:47
msgid "If the number of dimensions of :attr:`x` and :attr:`y` are not equal, prepend 1 to the dimensions of the tensor with fewer dimensions to make them equal length."
msgstr ""

#: ../../source/notes/broadcasting.rst:49
msgid "Then, for each dimension size, the resulting dimension size is the max of the sizes of :attr:`x` and :attr:`y` along that dimension."
msgstr ""

#: ../../source/notes/broadcasting.rst:72
msgid "In-place semantics"
msgstr ""

#: ../../source/notes/broadcasting.rst:73
msgid "One complication is that in-place operations do not allow the in-place tensor to change shape as a result of the broadcast."
msgstr ""

#: ../../source/notes/broadcasting.rst:90
msgid "Backwards compatibility"
msgstr ""

#: ../../source/notes/broadcasting.rst:91
msgid "Prior versions of PyTorch allowed certain pointwise functions to execute on tensors with different shapes, as long as the number of elements in each tensor was equal.  The pointwise operation would then be carried out by viewing each tensor as 1-dimensional.  PyTorch now supports broadcasting and the \"1-dimensional\" pointwise behavior is considered deprecated and will generate a Python warning in cases where tensors are not broadcastable, but have the same number of elements."
msgstr ""

#: ../../source/notes/broadcasting.rst:97
msgid "Note that the introduction of broadcasting can cause backwards incompatible changes in the case where two tensors do not have the same shape, but are broadcastable and have the same number of elements. For Example::"
msgstr ""

#: ../../source/notes/broadcasting.rst:103
msgid "would previously produce a Tensor with size: torch.Size([4,1]), but now produces a Tensor with size: torch.Size([4,4]). In order to help identify cases in your code where backwards incompatibilities introduced by broadcasting may exist, you may set `torch.utils.backcompat.broadcast_warning.enabled` to `True`, which will generate a python warning in such cases."
msgstr ""

